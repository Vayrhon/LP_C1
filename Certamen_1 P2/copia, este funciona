import sys
from antlr4 import *
from antlr4.InputStream import InputStream
from GramaticaLexer import GramaticaLexer
from GramaticaParser import GramaticaParser
from GramaticaVisitor import GramaticaVisitor
from Capa import CapaManager

if __name__ == '__main__':
    capa_manager = CapaManager()

    while (True):
        if len(sys.argv) > 1:
            input_stream = FileStream(sys.argv[1])
        else:
            input_stream = InputStream(sys.stdin.readline())

        lexer = GramaticaLexer(input_stream)
        token_stream = CommonTokenStream(lexer)
        parser = GramaticaParser(token_stream)
        tree = parser.programa()

        # Utilizar la misma instancia de CapaManager en cada iteración
        visitor = GramaticaVisitor(capa_manager)
        visitor.visit(tree)

        todas_las_capas = visitor.get_capas()  # Obtén las capas usando CapaManager
        print("capas", todas_las_capas)

def obtener_vecinos_de_capas(self):
    # Lista para almacenar los vecinos de cada celda en todas las capas.
        vecinos_por_capa = []

        # Iterar a través de las capas.
        for capa_id, capa in enumerate():
            filas, columnas = len(capa), len(capa[0])
            vecinos_capa_actual = []

            # Iterar a través de las celdas en la capa actual.
            for x in range(filas):
                for y in range(columnas):
                    vecinos_celda = []
                    # Vecinos en la misma capa
                    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < filas and 0 <= ny < columnas:
                            vecinos_celda.append((capa_id, nx, ny))

                    # Vecinos en la capa anterior
                    if capa_id > 0:
                        # Agregar lógica para obtener vecinos de la capa anterior
                        capa_anterior = self.capas[capa_id - 1]
                        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                            nx, ny = x + dx, y + dy
                            if 0 <= nx < len(capa_anterior) and 0 <= ny < len(capa_anterior[0]):
                                vecinos_celda.append((capa_id - 1, nx, ny))

                    # Vecinos en la capa siguiente
                    if capa_id < len(self.capas) - 1:
                        # Agregar lógica para obtener vecinos de la capa siguiente
                        capa_siguiente = self.capas[capa_id + 1]
                        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                            nx, ny = x + dx, y + dy
                            if 0 <= nx < len(capa_siguiente) and 0 <= ny < len(capa_siguiente[0]):
                                vecinos_celda.append((capa_id + 1, nx, ny))

                    vecinos_capa_actual.append(vecinos_celda)

            vecinos_por_capa.append(vecinos_capa_actual)

        return vecinos_por_capa        



#de aqui para abajo

# Generated from Gramatica.g4 by ANTLR 4.13.1

import random
from Capa import CapaManager
import random
from antlr4 import *
if "." in __name__:
    from .GramaticaParser import GramaticaParser
else:
    from GramaticaParser import GramaticaParser

# This class defines a complete generic visitor for a parse tree produced by GramaticaParser.

class GramaticaVisitor(ParseTreeVisitor):

    def __init__(self, capa_manager):
        super().__init__()  # Añadir aquí la lista de capas.
        self.capa_manager = capa_manager

    def get_capas(self):
        return self.capa_manager.obtener_capas()  # Método para obtener todas las capas.

    # Visit a parse tree produced by GramaticaParser#programa.
    def visitPrograma(self, ctx:GramaticaParser.ProgramaContext):
        self.visitChildren(ctx)
        return self.capa_manager.obtener_capas()  # Corrección aquí


    # Visit a parse tree produced by GramaticaParser#comando.
    def visitComando(self, ctx:GramaticaParser.ComandoContext):
        return self.visitChildren(ctx)


    # Visit a parse tree produced by GramaticaParser#CAPA.
    def visitCAPA(self, ctx:GramaticaParser.CAPAContext):
        capa_id = ctx.ID().getText()  # Obtener el ID de la capa
        dimensiones_texto = ctx.INT()  # Obtener las dimensiones de la capa
        dimensiones = [int(d.getText()) for d in dimensiones_texto]

        # Estados posibles para la simulación SEIR
        # Las proporciones de S, E, y R se ajustan para dejar espacio para al menos 1 I
        estados = ['S'] * 70 + ['E'] * 10 + ['I'] * 3 + ['R'] * 15  # Ajustar las proporciones como sea necesario

        # Crear la capa con un estado aleatorio para cada celda
        capa = [[random.choice(estados) for _ in range(dimensiones[1])] for _ in range(dimensiones[0])]

        # Asegúrate de que haya al menos un infectado
        # Selecciona una celda aleatoria y cambia su estado a 'I'
        fila_aleatoria = random.randint(0, dimensiones[0] - 1)
        columna_aleatoria = random.randint(0, dimensiones[1] - 1)
        capa[fila_aleatoria][columna_aleatoria] = 'I'

        self.capa_manager.agregar_capa(capa)
        return {"id": capa_id, "capa": capa}

    def determinar_nuevo_estado(self, estado_actual, estados_vecinos):
        # Define los parámetros de transición del modelo SEIR
        tasa_infeccion = 0.3  # Tasa de infección
        tasa_exposicion = 0.1  # Tasa de exposición
        tasa_recuperacion = 0.2  # Tasa de recuperación

        if estado_actual == 'S':
            # Si la celda actual es susceptible
            # Comprobar si alguno de los vecinos está infectado y propagar la exposición
            if 'I' in estados_vecinos:
                if random.random() < tasa_infeccion:
                    return 'E'  # La celda se expone

        elif estado_actual == 'E':
            # Si la celda está expuesta, comprobar si se convierte en infectada o se recupera
            if random.random() < tasa_recuperacion:
                return 'I'  # La celda se infecta
            return 'E'  # La celda permanece expuesta

        elif estado_actual == 'I':
            # Si la celda está infectada, comprobar si se recupera
            if random.random() < tasa_recuperacion:
                return 'R'  # La celda se recupera

        # Los estados 'S' y 'R' no cambian
        return estado_actual

    # Visit a parse tree produced by GramaticaParser#CELDA.
    def visitCELDA(self, ctx:GramaticaParser.CELDAContext):
        return self.visitChildren(ctx)


    # Visit a parse tree produced by GramaticaParser#ESTADO.
    def visitESTADO(self, ctx:GramaticaParser.ESTADOContext):
        return self.visitChildren(ctx)


    # Visit a parse tree produced by GramaticaParser#VECINDAD.
    def visitVECINDAD(self, ctx:GramaticaParser.VECINDADContext):
        return self.visitChildren(ctx)


    # Visit a parse tree produced by GramaticaParser#REGLA.
    def visitREGLA(self, ctx:GramaticaParser.REGLAContext):
        return self.visitChildren(ctx)


    # Visit a parse tree produced by GramaticaParser#TRANSICION.
    def visitTRANSICION(self, ctx:GramaticaParser.TRANSICIONContext):
        return self.visitChildren(ctx)



del GramaticaParser

def actualizar_estados(self):
        # Crea una nueva lista de capas para los estados actualizados
        nuevas_capas = [[[0 for _ in range(len(self.capas[0][0]))] for _ in range(len(self.capas[0]))] for _ in range(len(self.capas))]

        # Itera sobre cada capa y celda para actualizar su estado
        for num_capa, capa in enumerate(self.capas):
            for fila in range(len(capa)):
                for columna in range(len(capa[fila])):
                    estado_actual = self.capas[num_capa][fila][columna]
                    vecinos = self.obtener_vecinos(num_capa, fila, columna)
                    nuevas_capas[num_capa][fila][columna] = self.determinar_nuevo_estado(estado_actual, vecinos)


def actualizar_capas(self):
        # Crea una nueva lista de capas para los estados actualizados
        nuevas_capas = [[[0 for _ in range(len(capa[0]))] for _ in range(len(capa))] for capa in self.capas]

        # Itera sobre cada capa y celda para actualizar su estado
        for num_capa, capa in enumerate(self.capas):
            for fila in range(len(capa)):
                for columna in range(len(capa[fila])):
                    estado_actual = capa[fila][columna]
                    vecinos = self.obtener_vecinos(fila, columna, len(capa), len(capa[fila]))
                    nuevos_estados_vecinos = [self.capas[num_capa][f][c] for f, c in vecinos]
                    nuevas_capas[num_capa][fila][columna] = self.determinar_nuevo_estado(estado_actual, nuevos_estados_vecinos)
        

def determinar_nuevo_estado(self, estado_actual, estados_vecinos):
        # Define los parámetros de transición del modelo SEIR
        tasa_infeccion = 0.8  # Tasa de infección
        tasa_exposicion = 0.1  # Tasa de exposición
        tasa_recuperacion = 0.2  # Tasa de recuperación

        if estado_actual == 'S':
            # Si la celda actual es susceptible
            # Comprobar si alguno de los vecinos está infectado y propagar la exposición
            if 'I' in estados_vecinos:
                if random.random() < tasa_infeccion:
                    return 'E'  # La celda se expone

        elif estado_actual == 'E':
            # Si la celda está expuesta, comprobar si se convierte en infectada o se recupera
            if random.random() < tasa_recuperacion:
                return 'I'  # La celda se infecta
            return 'E'  # La celda permanece expuesta

        elif estado_actual == 'I':
            # Si la celda está infectada, comprobar si se recupera
            if random.random() < tasa_recuperacion:
                return 'R'  # La celda se recupera

        # Los estados 'S' y 'R' no cambian
        return estado_actual

def obtener_vecinos(self, num_capa, fila, columna, num_capas, filas, columnas):
    # Asumiendo vecindad de Moore en 3D
        vecinos = []
        for k in range(max(0, num_capa - 1), min(num_capa + 2, num_capas)):
            for i in range(max(0, fila - 1), min(fila + 2, filas)):
                for j in range(max(0, columna - 1), min(columna + 2, columnas)):
                    if (k, i, j) != (num_capa, fila, columna):  # Evitar la celda actual
                        vecinos.append((k, i, j))
        return vecinos




#estesiksi
import random
from Capa import CapaManager
import random
from antlr4 import *
if "." in __name__:
    from .GramaticaParser import GramaticaParser
else:
    from GramaticaParser import GramaticaParser

# This class defines a complete generic visitor for a parse tree produced by GramaticaParser.

class GramaticaVisitor(ParseTreeVisitor):

    def __init__(self, capa_manager):
        super().__init__()  # Añadir aquí la lista de capas.
        self.capa_manager = capa_manager

    def get_capas(self):
        return self.capa_manager.obtener_capas()  # Método para obtener todas las capas.

    # Visit a parse tree produced by GramaticaParser#programa.
    def visitPrograma(self, ctx:GramaticaParser.ProgramaContext):
        self.visitChildren(ctx)
        return self.capa_manager.obtener_capas()  # Corrección aquí

    # Visit a parse tree produced by GramaticaParser#CAPA.
    def visitCAPA(self, ctx:GramaticaParser.CAPAContext):
        capa_id = ctx.ID().getText()  # Obtener el ID de la capa
        dimensiones_texto = ctx.INT()  # Obtener las dimensiones de la capa
        dimensiones = [int(d.getText()) for d in dimensiones_texto]

        # Estados posibles para la simulación SEIR
        # Las proporciones de S, E, y R se ajustan para dejar espacio para al menos 1 I
        estados = ['S'] * 50 + ['E'] * 20 + ['I'] * 3 + ['R'] * 27  # Ajustar las proporciones como sea necesario

        # Crear la capa con un estado aleatorio para cada celda
        capa = [[random.choice(estados) for _ in range(dimensiones[1])] for _ in range(dimensiones[0])]

        # Asegúrate de que haya al menos un infectado
        # Selecciona una celda aleatoria y cambia su estado a 'I'
        fila_aleatoria = random.randint(0, dimensiones[0] - 1)
        columna_aleatoria = random.randint(0, dimensiones[1] - 1)
        capa[fila_aleatoria][columna_aleatoria] = 'I'

        self.capa_manager.agregar_capa(capa)
        return {"id": capa_id, "capa": capa}
        
    def visitVECINOS(self, ctx:GramaticaParser.VECINOSContext):
        self.num_capas = self.capa_manager.obtener_num_capas()
        self.filas, self.columnas = self.capa_manager.obtener_dimensiones_capa()
        id_capa = int(ctx.INT(0).getText())  # Aquí asumimos que ID es un número
        fila = int(ctx.INT(1).getText())
        columna = int(ctx.INT(2).getText())

        vecinos = self.capa_manager.obtener_vecinos(id_capa, fila, columna, self.num_capas, self.filas, self.columnas)
        print(vecinos)
        return vecinos
    
    def visitSIMULACION(self, ctx:GramaticaParser.SIMULACIONContext):
        pasos = int(ctx.INT().getText())  # Asumiendo que tienes un token NUMERO que define el número de pasos
        self.capa_manager.ejecutar_simulacion(pasos)

del GramaticaParser